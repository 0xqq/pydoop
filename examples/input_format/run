#!/usr/bin/env python

# BEGIN_COPYRIGHT
# END_COPYRIGHT

"""
Test overriding of RecordReader provided by InputFormat.

You can use a custom Java InputFormat with a Python RecordReader: the
RecordReader supplied by the InputFormat will be overridden by the
Python one. Just remember to set 'hadoop.pipes.java.recordreader' to
'false' (try to run this with --java-rr and see how it crashes).

The example custom InputFormat is a simple modification of the
standard TextInputFormat: it adds a configurable boolean parameter
that, if set to 'false', makes input file non-splitable (i.e., you
can't get more InputSplits than the number of input files).
"""

import sys, os, optparse, subprocess as sp, uuid

from pydoop.hadoop_utils import get_hadoop_exec
import pydoop.hdfs as hdfs
import compiler


HADOOP = get_hadoop_exec()
LOCAL_MR_SCRIPT = "wordcount-rr.py"
THIS_DIR = os.path.dirname(os.path.abspath(__file__))
DEFAULT_INPUT = os.path.normpath(os.path.join(THIS_DIR, "../input"))
OUTPUT = "output"
INPUT_FORMAT = "net.sourceforge.pydoop.mapred.TextInputFormat"
JAR_NAME = "pydoop-mapred.jar"
BASE_MR_OPTIONS = {
  "mapred.job.name": "test_rr_override",
  "mapreduce.admin.user.home.dir": os.path.expanduser("~"),
  "hadoop.pipes.java.recordreader": "false",
  "hadoop.pipes.java.recordwriter": "true",
  "mapred.input.format.class": INPUT_FORMAT,
  }


def build_d_options(opt_dict):
  d_options = []
  for name, value in opt_dict.iteritems():
    d_options.append("-D %s=%s" % (name, value))
  return " ".join(d_options)


def hadoop_pipes(pipes_opts, hadoop=HADOOP):
  cmd = "%s pipes %s" % (hadoop, pipes_opts)
  sys.stderr.write("RUNNING PIPES CMD: %r\n" % cmd)
  p = sp.Popen(cmd, shell=True)
  return os.waitpid(p.pid, 0)[1]


class HelpFormatter(optparse.IndentedHelpFormatter):
  def format_description(self, description):
    return description + "\n" if description else ""


def make_parser():
  parser = optparse.OptionParser(
    usage="%prog [OPTIONS]", formatter=HelpFormatter(),
    )
  parser.set_description(__doc__.lstrip())
  parser.add_option("-i", dest="input", metavar="STRING",
                    help="input dir/file ['%default']", default=DEFAULT_INPUT)
  parser.add_option("--java-rr", action="store_true",
                    help="Java RecordReader (CRASHES THE APPLICATION)")
  parser.add_option("--splitable", action="store_true",
                    help="allow input format to split individual files")
  parser.add_option("--clean", action="store_true",
                    help="do not run the example. Perform cleanup")
  return parser


def main():

  parser = make_parser()
  opt, _ = parser.parse_args()
  
  if opt.clean:
    os.system("find . -regex '.*\(\.class\|~\|.pyc\)' -exec rm -fv {} \;")
    os.system("rm -rfv *.jar %s" % OUTPUT)
    return 0
  
  retval = compiler.main(["compiler.py", JAR_NAME])
  if retval:
    return retval

  wd = "pydoop_test_input_format"
  hdfs.mkdir(wd)
  mr_script = hdfs.path.join(wd, LOCAL_MR_SCRIPT)
  hdfs.put(LOCAL_MR_SCRIPT, mr_script)
  input_ = hdfs.path.join(wd, opt.input)
  hdfs.put(opt.input, input_)
  output = hdfs.path.join(wd, uuid.uuid4().hex)

  mr_options = {}
  mr_options.update(BASE_MR_OPTIONS)
  if opt.java_rr:
    mr_options["hadoop.pipes.java.recordreader"] = "true"
  mr_options["pydoop.input.issplitable"] = "true" if opt.splitable else "false"
  d_options = build_d_options(mr_options)
  hadoop_pipes("%s -libjars %s -program %s -input %s -output %s" % (
    d_options, JAR_NAME, mr_script, input_, output
    ))
  hdfs.get(output, OUTPUT)
  hdfs.rmr(wd)

  return 0


if __name__ == "__main__":
  sys.exit(main())
